
wireless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b7c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002d04  08002d04  00003d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d34  08002d34  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d34  08002d34  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d34  08002d34  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d34  08002d34  00003d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d38  08002d38  00003d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000084  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005ade  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001500  00000000  00000000  00009b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000620  00000000  00000000  0000b020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000047d  00000000  00000000  0000b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199a5  00000000  00000000  0000babd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c70  00000000  00000000  00025462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000947a0  00000000  00000000  0002e0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c2872  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016b0  00000000  00000000  000c28b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000c3f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002cec 	.word	0x08002cec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002cec 	.word	0x08002cec

080001c8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	4b11      	ldr	r3, [pc, #68]	@ (8000224 <MX_GPIO_Init+0x5c>)
 80001de:	695b      	ldr	r3, [r3, #20]
 80001e0:	4a10      	ldr	r2, [pc, #64]	@ (8000224 <MX_GPIO_Init+0x5c>)
 80001e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001e6:	6153      	str	r3, [r2, #20]
 80001e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <MX_GPIO_Init+0x5c>)
 80001ea:	695b      	ldr	r3, [r3, #20]
 80001ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2110      	movs	r1, #16
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001fc:	f000 fcd2 	bl	8000ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000200:	2310      	movs	r3, #16
 8000202:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000204:	2301      	movs	r3, #1
 8000206:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800020c:	2303      	movs	r3, #3
 800020e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	4619      	mov	r1, r3
 8000214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000218:	f000 fb52 	bl	80008c0 <HAL_GPIO_Init>

}
 800021c:	bf00      	nop
 800021e:	3718      	adds	r7, #24
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	40021000 	.word	0x40021000

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 f9d7 	bl	80005e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f817 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f7ff ffc7 	bl	80001c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800023a:	f000 f855 	bl	80002e8 <MX_SPI1_Init>
  rfm22_tx_init();
 800023e:	f002 fc75 	bl	8002b2c <rfm22_tx_init>
  /* USER CODE BEGIN 2 */

  uint8_t sendData[1] = {37};
 8000242:	2325      	movs	r3, #37	@ 0x25
 8000244:	713b      	strb	r3, [r7, #4]



  uint8_t data;

  data = spi_read(0x00);
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f904 	bl	8000454 <spi_read>
 800024c:	4603      	mov	r3, r0
 800024e:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	rfm22_send(sendData, 1);
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2101      	movs	r1, #1
 8000254:	4618      	mov	r0, r3
 8000256:	f002 fcce 	bl	8002bf6 <rfm22_send>
	HAL_Delay(50);
 800025a:	2032      	movs	r0, #50	@ 0x32
 800025c:	f000 fa26 	bl	80006ac <HAL_Delay>
	rfm22_send(sendData, 1);
 8000260:	bf00      	nop
 8000262:	e7f5      	b.n	8000250 <main+0x28>

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b090      	sub	sp, #64	@ 0x40
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2228      	movs	r2, #40	@ 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fd0e 	bl	8002c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	2310      	movs	r3, #16
 8000290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	2300      	movs	r3, #0
 8000294:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fc9a 	bl	8000bd4 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002a6:	f000 f818 	bl	80002da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fcc4 	bl	8001c50 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ce:	f000 f804 	bl	80002da <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	@ 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002de:	b672      	cpsid	i
}
 80002e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e2:	bf00      	nop
 80002e4:	e7fd      	b.n	80002e2 <Error_Handler+0x8>
	...

080002e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80002ec:	4b1b      	ldr	r3, [pc, #108]	@ (800035c <MX_SPI1_Init+0x74>)
 80002ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000360 <MX_SPI1_Init+0x78>)
 80002f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002f2:	4b1a      	ldr	r3, [pc, #104]	@ (800035c <MX_SPI1_Init+0x74>)
 80002f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002fa:	4b18      	ldr	r3, [pc, #96]	@ (800035c <MX_SPI1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000300:	4b16      	ldr	r3, [pc, #88]	@ (800035c <MX_SPI1_Init+0x74>)
 8000302:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000306:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000308:	4b14      	ldr	r3, [pc, #80]	@ (800035c <MX_SPI1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800030e:	4b13      	ldr	r3, [pc, #76]	@ (800035c <MX_SPI1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000314:	4b11      	ldr	r3, [pc, #68]	@ (800035c <MX_SPI1_Init+0x74>)
 8000316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800031a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800031c:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <MX_SPI1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000322:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <MX_SPI1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000328:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_SPI1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <MX_SPI1_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000334:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_SPI1_Init+0x74>)
 8000336:	2207      	movs	r2, #7
 8000338:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800033a:	4b08      	ldr	r3, [pc, #32]	@ (800035c <MX_SPI1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_SPI1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000346:	4805      	ldr	r0, [pc, #20]	@ (800035c <MX_SPI1_Init+0x74>)
 8000348:	f001 fe52 	bl	8001ff0 <HAL_SPI_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000352:	f7ff ffc2 	bl	80002da <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000028 	.word	0x20000028
 8000360:	40013000 	.word	0x40013000

08000364 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b08a      	sub	sp, #40	@ 0x28
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036c:	f107 0314 	add.w	r3, r7, #20
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a17      	ldr	r2, [pc, #92]	@ (80003e0 <HAL_SPI_MspInit+0x7c>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d128      	bne.n	80003d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000386:	4b17      	ldr	r3, [pc, #92]	@ (80003e4 <HAL_SPI_MspInit+0x80>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a16      	ldr	r2, [pc, #88]	@ (80003e4 <HAL_SPI_MspInit+0x80>)
 800038c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <HAL_SPI_MspInit+0x80>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800039a:	613b      	str	r3, [r7, #16]
 800039c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800039e:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <HAL_SPI_MspInit+0x80>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a10      	ldr	r2, [pc, #64]	@ (80003e4 <HAL_SPI_MspInit+0x80>)
 80003a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <HAL_SPI_MspInit+0x80>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80003b6:	23e0      	movs	r3, #224	@ 0xe0
 80003b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c2:	2303      	movs	r3, #3
 80003c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80003c6:	2305      	movs	r3, #5
 80003c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	4619      	mov	r1, r3
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003d4:	f000 fa74 	bl	80008c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80003d8:	bf00      	nop
 80003da:	3728      	adds	r7, #40	@ 0x28
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40013000 	.word	0x40013000
 80003e4:	40021000 	.word	0x40021000

080003e8 <spi_write>:
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef spi_write(uint8_t regAddr, uint8_t pData)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	460a      	mov	r2, r1
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	4613      	mov	r3, r2
 80003f6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  uint8_t sendData[2] = {regAddr | 0x80, pData};
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	733b      	strb	r3, [r7, #12]
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	737b      	strb	r3, [r7, #13]

  // Start communication
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2110      	movs	r1, #16
 800040a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040e:	f000 fbc9 	bl	8000ba4 <HAL_GPIO_WritePin>

  // send reg addr and data to write into
  ret = HAL_SPI_Transmit(&hspi1, sendData, 2, 20);
 8000412:	f107 010c 	add.w	r1, r7, #12
 8000416:	2314      	movs	r3, #20
 8000418:	2202      	movs	r2, #2
 800041a:	480d      	ldr	r0, [pc, #52]	@ (8000450 <spi_write+0x68>)
 800041c:	f001 fe8b 	bl	8002136 <HAL_SPI_Transmit>
 8000420:	4603      	mov	r3, r0
 8000422:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK)
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d007      	beq.n	800043a <spi_write+0x52>
  {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	2110      	movs	r1, #16
 800042e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000432:	f000 fbb7 	bl	8000ba4 <HAL_GPIO_WritePin>
    return ret;
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	e006      	b.n	8000448 <spi_write+0x60>
  }

  // End communication
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800043a:	2201      	movs	r2, #1
 800043c:	2110      	movs	r1, #16
 800043e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000442:	f000 fbaf 	bl	8000ba4 <HAL_GPIO_WritePin>
  return HAL_OK;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000028 	.word	0x20000028

08000454 <spi_read>:

uint8_t spi_read(uint8_t regAddr)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af02      	add	r7, sp, #8
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;

  uint8_t senddata[2] = {regAddr, 0};
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	733b      	strb	r3, [r7, #12]
 8000462:	2300      	movs	r3, #0
 8000464:	737b      	strb	r3, [r7, #13]
  uint8_t receivedata_[2] = {0};
 8000466:	2300      	movs	r3, #0
 8000468:	813b      	strh	r3, [r7, #8]


  // Start communication
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2110      	movs	r1, #16
 800046e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000472:	f000 fb97 	bl	8000ba4 <HAL_GPIO_WritePin>

  ret = HAL_SPI_TransmitReceive(&hspi1, senddata, receivedata_, 2, 50);
 8000476:	f107 0208 	add.w	r2, r7, #8
 800047a:	f107 010c 	add.w	r1, r7, #12
 800047e:	2332      	movs	r3, #50	@ 0x32
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2302      	movs	r3, #2
 8000484:	480d      	ldr	r0, [pc, #52]	@ (80004bc <spi_read+0x68>)
 8000486:	f001 ffcb 	bl	8002420 <HAL_SPI_TransmitReceive>
 800048a:	4603      	mov	r3, r0
 800048c:	73fb      	strb	r3, [r7, #15]


    if(ret != HAL_OK) {
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d007      	beq.n	80004a4 <spi_read+0x50>
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2110      	movs	r1, #16
 8000498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800049c:	f000 fb82 	bl	8000ba4 <HAL_GPIO_WritePin>
  	  return 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	e006      	b.n	80004b2 <spi_read+0x5e>
    }



  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2110      	movs	r1, #16
 80004a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ac:	f000 fb7a 	bl	8000ba4 <HAL_GPIO_WritePin>
  return receivedata_[1];
 80004b0:	7a7b      	ldrb	r3, [r7, #9]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000028 	.word	0x20000028

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <HAL_MspInit+0x44>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <HAL_MspInit+0x44>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <HAL_MspInit+0x44>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <HAL_MspInit+0x44>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a08      	ldr	r2, [pc, #32]	@ (8000504 <HAL_MspInit+0x44>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <HAL_MspInit+0x44>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <NMI_Handler+0x4>

08000510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <MemManage_Handler+0x4>

08000520 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <BusFault_Handler+0x4>

08000528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <UsageFault_Handler+0x4>

08000530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f885 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <SystemInit+0x20>)
 800056e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000572:	4a05      	ldr	r2, [pc, #20]	@ (8000588 <SystemInit+0x20>)
 8000574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800058c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000590:	f7ff ffea 	bl	8000568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490d      	ldr	r1, [pc, #52]	@ (80005cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0d      	ldr	r2, [pc, #52]	@ (80005d0 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0a      	ldr	r4, [pc, #40]	@ (80005d8 <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ba:	f002 fb73 	bl	8002ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005be:	f7ff fe33 	bl	8000228 <main>

080005c2 <LoopForever>:

LoopForever:
    b LoopForever
 80005c2:	e7fe      	b.n	80005c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005c4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005d0:	08002d3c 	.word	0x08002d3c
  ldr r2, =_sbss
 80005d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d8:	20000090 	.word	0x20000090

080005dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_2_IRQHandler>
	...

080005e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <HAL_Init+0x28>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <HAL_Init+0x28>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f0:	2003      	movs	r0, #3
 80005f2:	f000 f931 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f6:	200f      	movs	r0, #15
 80005f8:	f000 f808 	bl	800060c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005fc:	f7ff ff60 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40022000 	.word	0x40022000

0800060c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <HAL_InitTick+0x54>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <HAL_InitTick+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f93b 	bl	80008a6 <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e00e      	b.n	8000658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d80a      	bhi.n	8000656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f000 f911 	bl	800086e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4a06      	ldr	r2, [pc, #24]	@ (8000668 <HAL_InitTick+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000000 	.word	0x20000000
 8000664:	20000008 	.word	0x20000008
 8000668:	20000004 	.word	0x20000004

0800066c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <HAL_IncTick+0x20>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_IncTick+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <HAL_IncTick+0x24>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000008 	.word	0x20000008
 8000690:	2000008c 	.word	0x2000008c

08000694 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;  
 8000698:	4b03      	ldr	r3, [pc, #12]	@ (80006a8 <HAL_GetTick+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	2000008c 	.word	0x2000008c

080006ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b4:	f7ff ffee 	bl	8000694 <HAL_GetTick>
 80006b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c4:	d005      	beq.n	80006d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c6:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <HAL_Delay+0x44>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006d2:	bf00      	nop
 80006d4:	f7ff ffde 	bl	8000694 <HAL_GetTick>
 80006d8:	4602      	mov	r2, r0
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d8f7      	bhi.n	80006d4 <HAL_Delay+0x28>
  {
  }
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000008 	.word	0x20000008

080006f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <__NVIC_SetPriorityGrouping+0x44>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000710:	4013      	ands	r3, r2
 8000712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800071c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000726:	4a04      	ldr	r2, [pc, #16]	@ (8000738 <__NVIC_SetPriorityGrouping+0x44>)
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	60d3      	str	r3, [r2, #12]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000740:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <__NVIC_GetPriorityGrouping+0x18>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	f003 0307 	and.w	r3, r3, #7
}
 800074a:	4618      	mov	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	@ (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	@ (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	@ 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	@ 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082a:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f7ff ff8e 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	@ (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff47 	bl	80006f4 <__NVIC_SetPriorityGrouping>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000880:	f7ff ff5c 	bl	800073c <__NVIC_GetPriorityGrouping>
 8000884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff8e 	bl	80007ac <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff5d 	bl	8000758 <__NVIC_SetPriority>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ffb0 	bl	8000814 <SysTick_Config>
 80008b4:	4603      	mov	r3, r0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ce:	e14e      	b.n	8000b6e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	2101      	movs	r1, #1
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	fa01 f303 	lsl.w	r3, r1, r3
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f000 8140 	beq.w	8000b68 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d005      	beq.n	8000900 <HAL_GPIO_Init+0x40>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f003 0303 	and.w	r3, r3, #3
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d130      	bne.n	8000962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000936:	2201      	movs	r2, #1
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	091b      	lsrs	r3, r3, #4
 800094c:	f003 0201 	and.w	r2, r3, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	2b03      	cmp	r3, #3
 800096c:	d017      	beq.n	800099e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	2203      	movs	r2, #3
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d123      	bne.n	80009f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	08da      	lsrs	r2, r3, #3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3208      	adds	r2, #8
 80009b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	220f      	movs	r2, #15
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	691a      	ldr	r2, [r3, #16]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f003 0307 	and.w	r3, r3, #7
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	08da      	lsrs	r2, r3, #3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3208      	adds	r2, #8
 80009ec:	6939      	ldr	r1, [r7, #16]
 80009ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	2203      	movs	r2, #3
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0203 	and.w	r2, r3, #3
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 809a 	beq.w	8000b68 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a34:	4b55      	ldr	r3, [pc, #340]	@ (8000b8c <HAL_GPIO_Init+0x2cc>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a54      	ldr	r2, [pc, #336]	@ (8000b8c <HAL_GPIO_Init+0x2cc>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b52      	ldr	r3, [pc, #328]	@ (8000b8c <HAL_GPIO_Init+0x2cc>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a4c:	4a50      	ldr	r2, [pc, #320]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	220f      	movs	r2, #15
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a76:	d013      	beq.n	8000aa0 <HAL_GPIO_Init+0x1e0>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a46      	ldr	r2, [pc, #280]	@ (8000b94 <HAL_GPIO_Init+0x2d4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d00d      	beq.n	8000a9c <HAL_GPIO_Init+0x1dc>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a45      	ldr	r2, [pc, #276]	@ (8000b98 <HAL_GPIO_Init+0x2d8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d007      	beq.n	8000a98 <HAL_GPIO_Init+0x1d8>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a44      	ldr	r2, [pc, #272]	@ (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d101      	bne.n	8000a94 <HAL_GPIO_Init+0x1d4>
 8000a90:	2303      	movs	r3, #3
 8000a92:	e006      	b.n	8000aa2 <HAL_GPIO_Init+0x1e2>
 8000a94:	2305      	movs	r3, #5
 8000a96:	e004      	b.n	8000aa2 <HAL_GPIO_Init+0x1e2>
 8000a98:	2302      	movs	r3, #2
 8000a9a:	e002      	b.n	8000aa2 <HAL_GPIO_Init+0x1e2>
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e000      	b.n	8000aa2 <HAL_GPIO_Init+0x1e2>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	f002 0203 	and.w	r2, r2, #3
 8000aa8:	0092      	lsls	r2, r2, #2
 8000aaa:	4093      	lsls	r3, r2
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ab2:	4937      	ldr	r1, [pc, #220]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	3302      	adds	r3, #2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac0:	4b37      	ldr	r3, [pc, #220]	@ (8000ba0 <HAL_GPIO_Init+0x2e0>)
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8000ba0 <HAL_GPIO_Init+0x2e0>)
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba0 <HAL_GPIO_Init+0x2e0>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b0e:	4a24      	ldr	r2, [pc, #144]	@ (8000ba0 <HAL_GPIO_Init+0x2e0>)
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b14:	4b22      	ldr	r3, [pc, #136]	@ (8000ba0 <HAL_GPIO_Init+0x2e0>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b38:	4a19      	ldr	r2, [pc, #100]	@ (8000ba0 <HAL_GPIO_Init+0x2e0>)
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_GPIO_Init+0x2e0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <HAL_GPIO_Init+0x2e0>)
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	fa22 f303 	lsr.w	r3, r2, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f47f aea9 	bne.w	80008d0 <HAL_GPIO_Init+0x10>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	48000400 	.word	0x48000400
 8000b98:	48000800 	.word	0x48000800
 8000b9c:	48000c00 	.word	0x48000c00
 8000ba0:	40010400 	.word	0x40010400

08000ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bb4:	787b      	ldrb	r3, [r7, #1]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bba:	887a      	ldrh	r2, [r7, #2]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bc0:	e002      	b.n	8000bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bc2:	887a      	ldrh	r2, [r7, #2]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000be0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000be4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f001 b823 	b.w	8001c40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 817d 	beq.w	8000f0a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c10:	4bbc      	ldr	r3, [pc, #752]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d00c      	beq.n	8000c36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c1c:	4bb9      	ldr	r3, [pc, #740]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 030c 	and.w	r3, r3, #12
 8000c24:	2b08      	cmp	r3, #8
 8000c26:	d15c      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x10e>
 8000c28:	4bb6      	ldr	r3, [pc, #728]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c34:	d155      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x10e>
 8000c36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c3a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000c42:	fa93 f3a3 	rbit	r3, r3
 8000c46:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4e:	fab3 f383 	clz	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	095b      	lsrs	r3, r3, #5
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d102      	bne.n	8000c68 <HAL_RCC_OscConfig+0x94>
 8000c62:	4ba8      	ldr	r3, [pc, #672]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	e015      	b.n	8000c94 <HAL_RCC_OscConfig+0xc0>
 8000c68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c6c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000c74:	fa93 f3a3 	rbit	r3, r3
 8000c78:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000c7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c80:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000c84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000c88:	fa93 f3a3 	rbit	r3, r3
 8000c8c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000c90:	4b9c      	ldr	r3, [pc, #624]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c98:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000c9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000ca0:	fa92 f2a2 	rbit	r2, r2
 8000ca4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000ca8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	f042 0220 	orr.w	r2, r2, #32
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	f002 021f 	and.w	r2, r2, #31
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f000 811f 	beq.w	8000f08 <HAL_RCC_OscConfig+0x334>
 8000cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8116 	bne.w	8000f08 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f000 bfaf 	b.w	8001c40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ce6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cf2:	d106      	bne.n	8000d02 <HAL_RCC_OscConfig+0x12e>
 8000cf4:	4b83      	ldr	r3, [pc, #524]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a82      	ldr	r2, [pc, #520]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e036      	b.n	8000d70 <HAL_RCC_OscConfig+0x19c>
 8000d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x158>
 8000d12:	4b7c      	ldr	r3, [pc, #496]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a7b      	ldr	r2, [pc, #492]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b79      	ldr	r3, [pc, #484]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a78      	ldr	r2, [pc, #480]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e021      	b.n	8000d70 <HAL_RCC_OscConfig+0x19c>
 8000d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d3c:	d10c      	bne.n	8000d58 <HAL_RCC_OscConfig+0x184>
 8000d3e:	4b71      	ldr	r3, [pc, #452]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a70      	ldr	r2, [pc, #448]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	4b6e      	ldr	r3, [pc, #440]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a6d      	ldr	r2, [pc, #436]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e00b      	b.n	8000d70 <HAL_RCC_OscConfig+0x19c>
 8000d58:	4b6a      	ldr	r3, [pc, #424]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a69      	ldr	r2, [pc, #420]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b67      	ldr	r3, [pc, #412]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a66      	ldr	r2, [pc, #408]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d6e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d70:	4b64      	ldr	r3, [pc, #400]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d74:	f023 020f 	bic.w	r2, r3, #15
 8000d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	495f      	ldr	r1, [pc, #380]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d059      	beq.n	8000e4e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fc7b 	bl	8000694 <HAL_GetTick>
 8000d9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	e00a      	b.n	8000dba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da4:	f7ff fc76 	bl	8000694 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b64      	cmp	r3, #100	@ 0x64
 8000db2:	d902      	bls.n	8000dba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	f000 bf43 	b.w	8001c40 <HAL_RCC_OscConfig+0x106c>
 8000dba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dbe:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000dc6:	fa93 f3a3 	rbit	r3, r3
 8000dca:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000dce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd2:	fab3 f383 	clz	r3, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	095b      	lsrs	r3, r3, #5
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d102      	bne.n	8000dec <HAL_RCC_OscConfig+0x218>
 8000de6:	4b47      	ldr	r3, [pc, #284]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	e015      	b.n	8000e18 <HAL_RCC_OscConfig+0x244>
 8000dec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000df0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000e00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e04:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000e08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000e14:	4b3b      	ldr	r3, [pc, #236]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e1c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000e20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000e24:	fa92 f2a2 	rbit	r2, r2
 8000e28:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000e2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	f042 0220 	orr.w	r2, r2, #32
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	f002 021f 	and.w	r2, r2, #31
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0ab      	beq.n	8000da4 <HAL_RCC_OscConfig+0x1d0>
 8000e4c:	e05d      	b.n	8000f0a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fc21 	bl	8000694 <HAL_GetTick>
 8000e52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e56:	e00a      	b.n	8000e6e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fc1c 	bl	8000694 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b64      	cmp	r3, #100	@ 0x64
 8000e66:	d902      	bls.n	8000e6e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	f000 bee9 	b.w	8001c40 <HAL_RCC_OscConfig+0x106c>
 8000e6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e72:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000e7a:	fa93 f3a3 	rbit	r3, r3
 8000e7e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000e82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	fab3 f383 	clz	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	095b      	lsrs	r3, r3, #5
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d102      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x2cc>
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	e015      	b.n	8000ecc <HAL_RCC_OscConfig+0x2f8>
 8000ea0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ea4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000eb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eb8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000ebc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000ec0:	fa93 f3a3 	rbit	r3, r3
 8000ec4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <HAL_RCC_OscConfig+0x330>)
 8000eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ecc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ed0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000ed4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000ed8:	fa92 f2a2 	rbit	r2, r2
 8000edc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000ee0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000ee4:	fab2 f282 	clz	r2, r2
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	f042 0220 	orr.w	r2, r2, #32
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	f002 021f 	and.w	r2, r2, #31
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	4013      	ands	r3, r2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ab      	bne.n	8000e58 <HAL_RCC_OscConfig+0x284>
 8000f00:	e003      	b.n	8000f0a <HAL_RCC_OscConfig+0x336>
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 817d 	beq.w	800121a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f20:	4ba6      	ldr	r3, [pc, #664]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00b      	beq.n	8000f44 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f2c:	4ba3      	ldr	r3, [pc, #652]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d172      	bne.n	800101e <HAL_RCC_OscConfig+0x44a>
 8000f38:	4ba0      	ldr	r3, [pc, #640]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d16c      	bne.n	800101e <HAL_RCC_OscConfig+0x44a>
 8000f44:	2302      	movs	r3, #2
 8000f46:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000f56:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5a:	fab3 f383 	clz	r3, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	095b      	lsrs	r3, r3, #5
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d102      	bne.n	8000f74 <HAL_RCC_OscConfig+0x3a0>
 8000f6e:	4b93      	ldr	r3, [pc, #588]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	e013      	b.n	8000f9c <HAL_RCC_OscConfig+0x3c8>
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000f7e:	fa93 f3a3 	rbit	r3, r3
 8000f82:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000f8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000f98:	4b88      	ldr	r3, [pc, #544]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000fa2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000fa6:	fa92 f2a2 	rbit	r2, r2
 8000faa:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000fae:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000fb2:	fab2 f282 	clz	r2, r2
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	f042 0220 	orr.w	r2, r2, #32
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	f002 021f 	and.w	r2, r2, #31
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00a      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x410>
 8000fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d002      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f000 be2e 	b.w	8001c40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe4:	4b75      	ldr	r3, [pc, #468]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ff0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	21f8      	movs	r1, #248	@ 0xf8
 8000ffa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffe:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001002:	fa91 f1a1 	rbit	r1, r1
 8001006:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800100a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800100e:	fab1 f181 	clz	r1, r1
 8001012:	b2c9      	uxtb	r1, r1
 8001014:	408b      	lsls	r3, r1
 8001016:	4969      	ldr	r1, [pc, #420]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 8001018:	4313      	orrs	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101c:	e0fd      	b.n	800121a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800101e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001022:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8088 	beq.w	8001140 <HAL_RCC_OscConfig+0x56c>
 8001030:	2301      	movs	r3, #1
 8001032:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001042:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001046:	fab3 f383 	clz	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001050:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	461a      	mov	r2, r3
 8001058:	2301      	movs	r3, #1
 800105a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fb1a 	bl	8000694 <HAL_GetTick>
 8001060:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001064:	e00a      	b.n	800107c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001066:	f7ff fb15 	bl	8000694 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d902      	bls.n	800107c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	f000 bde2 	b.w	8001c40 <HAL_RCC_OscConfig+0x106c>
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001082:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800108e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d102      	bne.n	80010ac <HAL_RCC_OscConfig+0x4d8>
 80010a6:	4b45      	ldr	r3, [pc, #276]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	e013      	b.n	80010d4 <HAL_RCC_OscConfig+0x500>
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80010c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80010d0:	4b3a      	ldr	r3, [pc, #232]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 80010d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d4:	2202      	movs	r2, #2
 80010d6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80010da:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80010de:	fa92 f2a2 	rbit	r2, r2
 80010e2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80010e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80010ea:	fab2 f282 	clz	r2, r2
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	f042 0220 	orr.w	r2, r2, #32
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	f002 021f 	and.w	r2, r2, #31
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0af      	beq.n	8001066 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001106:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800110e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001112:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	21f8      	movs	r1, #248	@ 0xf8
 800111c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001124:	fa91 f1a1 	rbit	r1, r1
 8001128:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800112c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001130:	fab1 f181 	clz	r1, r1
 8001134:	b2c9      	uxtb	r1, r1
 8001136:	408b      	lsls	r3, r1
 8001138:	4920      	ldr	r1, [pc, #128]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
 800113e:	e06c      	b.n	800121a <HAL_RCC_OscConfig+0x646>
 8001140:	2301      	movs	r3, #1
 8001142:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001152:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001160:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	461a      	mov	r2, r3
 8001168:	2300      	movs	r3, #0
 800116a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fa92 	bl	8000694 <HAL_GetTick>
 8001170:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001174:	e00a      	b.n	800118c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fa8d 	bl	8000694 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d902      	bls.n	800118c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	f000 bd5a 	b.w	8001c40 <HAL_RCC_OscConfig+0x106c>
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800119e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a2:	fab3 f383 	clz	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	095b      	lsrs	r3, r3, #5
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d104      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5ec>
 80011b6:	4b01      	ldr	r3, [pc, #4]	@ (80011bc <HAL_RCC_OscConfig+0x5e8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	e015      	b.n	80011e8 <HAL_RCC_OscConfig+0x614>
 80011bc:	40021000 	.word	0x40021000
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80011d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80011e4:	4bc8      	ldr	r3, [pc, #800]	@ (8001508 <HAL_RCC_OscConfig+0x934>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e8:	2202      	movs	r2, #2
 80011ea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80011ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80011f2:	fa92 f2a2 	rbit	r2, r2
 80011f6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80011fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80011fe:	fab2 f282 	clz	r2, r2
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	f042 0220 	orr.w	r2, r2, #32
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	f002 021f 	and.w	r2, r2, #31
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1ad      	bne.n	8001176 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800121e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8110 	beq.w	8001450 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001234:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d079      	beq.n	8001334 <HAL_RCC_OscConfig+0x760>
 8001240:	2301      	movs	r3, #1
 8001242:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001256:	fab3 f383 	clz	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	4bab      	ldr	r3, [pc, #684]	@ (800150c <HAL_RCC_OscConfig+0x938>)
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	461a      	mov	r2, r3
 8001266:	2301      	movs	r3, #1
 8001268:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fa13 	bl	8000694 <HAL_GetTick>
 800126e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	e00a      	b.n	800128a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fa0e 	bl	8000694 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d902      	bls.n	800128a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	f000 bcdb 	b.w	8001c40 <HAL_RCC_OscConfig+0x106c>
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001290:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800129c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012a4:	2202      	movs	r2, #2
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	fa93 f2a3 	rbit	r2, r3
 80012b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012c8:	2202      	movs	r2, #2
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	fa93 f2a3 	rbit	r2, r3
 80012da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e4:	4b88      	ldr	r3, [pc, #544]	@ (8001508 <HAL_RCC_OscConfig+0x934>)
 80012e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012f0:	2102      	movs	r1, #2
 80012f2:	6019      	str	r1, [r3, #0]
 80012f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f1a3 	rbit	r1, r3
 8001302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001306:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800130a:	6019      	str	r1, [r3, #0]
  return result;
 800130c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001310:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0a0      	beq.n	8001274 <HAL_RCC_OscConfig+0x6a0>
 8001332:	e08d      	b.n	8001450 <HAL_RCC_OscConfig+0x87c>
 8001334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001338:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001344:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	fa93 f2a3 	rbit	r2, r3
 800134e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001352:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001356:	601a      	str	r2, [r3, #0]
  return result;
 8001358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800135c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001360:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	4b68      	ldr	r3, [pc, #416]	@ (800150c <HAL_RCC_OscConfig+0x938>)
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	461a      	mov	r2, r3
 8001372:	2300      	movs	r3, #0
 8001374:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001376:	f7ff f98d 	bl	8000694 <HAL_GetTick>
 800137a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137e:	e00a      	b.n	8001396 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff f988 	bl	8000694 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d902      	bls.n	8001396 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	f000 bc55 	b.w	8001c40 <HAL_RCC_OscConfig+0x106c>
 8001396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800139a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800139e:	2202      	movs	r2, #2
 80013a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	fa93 f2a3 	rbit	r2, r3
 80013b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013c2:	2202      	movs	r2, #2
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	fa93 f2a3 	rbit	r2, r3
 80013d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013e6:	2202      	movs	r2, #2
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	fa93 f2a3 	rbit	r2, r3
 80013f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001400:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001402:	4b41      	ldr	r3, [pc, #260]	@ (8001508 <HAL_RCC_OscConfig+0x934>)
 8001404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800140e:	2102      	movs	r1, #2
 8001410:	6019      	str	r1, [r3, #0]
 8001412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001416:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fa93 f1a3 	rbit	r1, r3
 8001420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001424:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001428:	6019      	str	r1, [r3, #0]
  return result;
 800142a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	fab3 f383 	clz	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	2101      	movs	r1, #1
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d197      	bne.n	8001380 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 81a1 	beq.w	80017a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146c:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <HAL_RCC_OscConfig+0x934>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d116      	bne.n	80014a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	4b23      	ldr	r3, [pc, #140]	@ (8001508 <HAL_RCC_OscConfig+0x934>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	4a22      	ldr	r2, [pc, #136]	@ (8001508 <HAL_RCC_OscConfig+0x934>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001482:	61d3      	str	r3, [r2, #28]
 8001484:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <HAL_RCC_OscConfig+0x934>)
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800148c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001490:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800149e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_RCC_OscConfig+0x93c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d11a      	bne.n	80014e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <HAL_RCC_OscConfig+0x93c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a16      	ldr	r2, [pc, #88]	@ (8001510 <HAL_RCC_OscConfig+0x93c>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014be:	f7ff f8e9 	bl	8000694 <HAL_GetTick>
 80014c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	e009      	b.n	80014dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c8:	f7ff f8e4 	bl	8000694 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	@ 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e3b1      	b.n	8001c40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <HAL_RCC_OscConfig+0x93c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0ef      	beq.n	80014c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10d      	bne.n	8001514 <HAL_RCC_OscConfig+0x940>
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_RCC_OscConfig+0x934>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4a02      	ldr	r2, [pc, #8]	@ (8001508 <HAL_RCC_OscConfig+0x934>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6213      	str	r3, [r2, #32]
 8001504:	e03c      	b.n	8001580 <HAL_RCC_OscConfig+0x9ac>
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	10908120 	.word	0x10908120
 8001510:	40007000 	.word	0x40007000
 8001514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001518:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x96a>
 8001524:	4bc1      	ldr	r3, [pc, #772]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4ac0      	ldr	r2, [pc, #768]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	6213      	str	r3, [r2, #32]
 8001530:	4bbe      	ldr	r3, [pc, #760]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4abd      	ldr	r2, [pc, #756]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 8001536:	f023 0304 	bic.w	r3, r3, #4
 800153a:	6213      	str	r3, [r2, #32]
 800153c:	e020      	b.n	8001580 <HAL_RCC_OscConfig+0x9ac>
 800153e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001542:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b05      	cmp	r3, #5
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x994>
 800154e:	4bb7      	ldr	r3, [pc, #732]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4ab6      	ldr	r2, [pc, #728]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	4bb4      	ldr	r3, [pc, #720]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4ab3      	ldr	r2, [pc, #716]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6213      	str	r3, [r2, #32]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0x9ac>
 8001568:	4bb0      	ldr	r3, [pc, #704]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4aaf      	ldr	r2, [pc, #700]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	6213      	str	r3, [r2, #32]
 8001574:	4bad      	ldr	r3, [pc, #692]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4aac      	ldr	r2, [pc, #688]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 800157a:	f023 0304 	bic.w	r3, r3, #4
 800157e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001584:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8081 	beq.w	8001694 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff f87f 	bl	8000694 <HAL_GetTick>
 8001596:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff f87a 	bl	8000694 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e345      	b.n	8001c40 <HAL_RCC_OscConfig+0x106c>
 80015b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015bc:	2202      	movs	r2, #2
 80015be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fa93 f2a3 	rbit	r2, r3
 80015ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015e0:	2202      	movs	r2, #2
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	fa93 f2a3 	rbit	r2, r3
 80015f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80015fa:	601a      	str	r2, [r3, #0]
  return result;
 80015fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001600:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001604:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	095b      	lsrs	r3, r3, #5
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d102      	bne.n	8001620 <HAL_RCC_OscConfig+0xa4c>
 800161a:	4b84      	ldr	r3, [pc, #528]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	e013      	b.n	8001648 <HAL_RCC_OscConfig+0xa74>
 8001620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001624:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001628:	2202      	movs	r2, #2
 800162a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001630:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	fa93 f2a3 	rbit	r2, r3
 800163a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	4b79      	ldr	r3, [pc, #484]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800164c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001650:	2102      	movs	r1, #2
 8001652:	6011      	str	r1, [r2, #0]
 8001654:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001658:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	fa92 f1a2 	rbit	r1, r2
 8001662:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001666:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800166a:	6011      	str	r1, [r2, #0]
  return result;
 800166c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001670:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	fab2 f282 	clz	r2, r2
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	f002 021f 	and.w	r2, r2, #31
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d084      	beq.n	800159c <HAL_RCC_OscConfig+0x9c8>
 8001692:	e07f      	b.n	8001794 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7fe fffe 	bl	8000694 <HAL_GetTick>
 8001698:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	e00b      	b.n	80016b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7fe fff9 	bl	8000694 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e2c4      	b.n	8001c40 <HAL_RCC_OscConfig+0x106c>
 80016b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016be:	2202      	movs	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016e2:	2202      	movs	r2, #2
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f2a3 	rbit	r2, r3
 80016f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016fc:	601a      	str	r2, [r3, #0]
  return result;
 80016fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001702:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001706:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d102      	bne.n	8001722 <HAL_RCC_OscConfig+0xb4e>
 800171c:	4b43      	ldr	r3, [pc, #268]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	e013      	b.n	800174a <HAL_RCC_OscConfig+0xb76>
 8001722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001726:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800172a:	2202      	movs	r2, #2
 800172c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001732:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	fa93 f2a3 	rbit	r2, r3
 800173c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001740:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	4b39      	ldr	r3, [pc, #228]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800174e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001752:	2102      	movs	r1, #2
 8001754:	6011      	str	r1, [r2, #0]
 8001756:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800175a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	fa92 f1a2 	rbit	r1, r2
 8001764:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001768:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800176c:	6011      	str	r1, [r2, #0]
  return result;
 800176e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001772:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	fab2 f282 	clz	r2, r2
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	f002 021f 	and.w	r2, r2, #31
 8001788:	2101      	movs	r1, #1
 800178a:	fa01 f202 	lsl.w	r2, r1, r2
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d184      	bne.n	800169e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001794:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179c:	4b23      	ldr	r3, [pc, #140]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	4a22      	ldr	r2, [pc, #136]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 80017a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8242 	beq.w	8001c3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ba:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <HAL_RCC_OscConfig+0xc58>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	f000 8213 	beq.w	8001bee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	f040 8162 	bne.w	8001a9e <HAL_RCC_OscConfig+0xeca>
 80017da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017de:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	fa93 f2a3 	rbit	r2, r3
 80017f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80017fe:	601a      	str	r2, [r3, #0]
  return result;
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001808:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001814:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	461a      	mov	r2, r3
 800181c:	2300      	movs	r3, #0
 800181e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7fe ff38 	bl	8000694 <HAL_GetTick>
 8001824:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001828:	e00c      	b.n	8001844 <HAL_RCC_OscConfig+0xc70>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7fe ff30 	bl	8000694 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1fd      	b.n	8001c40 <HAL_RCC_OscConfig+0x106c>
 8001844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001848:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800184c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001856:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001864:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001868:	601a      	str	r2, [r3, #0]
  return result;
 800186a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001872:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b01      	cmp	r3, #1
 8001886:	d102      	bne.n	800188e <HAL_RCC_OscConfig+0xcba>
 8001888:	4bb0      	ldr	r3, [pc, #704]	@ (8001b4c <HAL_RCC_OscConfig+0xf78>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	e027      	b.n	80018de <HAL_RCC_OscConfig+0xd0a>
 800188e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001892:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001896:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800189a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	fa93 f2a3 	rbit	r2, r3
 80018d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	4b9c      	ldr	r3, [pc, #624]	@ (8001b4c <HAL_RCC_OscConfig+0xf78>)
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018e2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80018e6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80018ea:	6011      	str	r1, [r2, #0]
 80018ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018f0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	fa92 f1a2 	rbit	r1, r2
 80018fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001902:	6011      	str	r1, [r2, #0]
  return result;
 8001904:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001908:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	fab2 f282 	clz	r2, r2
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	f042 0220 	orr.w	r2, r2, #32
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	f002 021f 	and.w	r2, r2, #31
 800191e:	2101      	movs	r1, #1
 8001920:	fa01 f202 	lsl.w	r2, r1, r2
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d182      	bne.n	8001830 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192a:	4b88      	ldr	r3, [pc, #544]	@ (8001b4c <HAL_RCC_OscConfig+0xf78>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800193e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001942:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	430b      	orrs	r3, r1
 800194c:	497f      	ldr	r1, [pc, #508]	@ (8001b4c <HAL_RCC_OscConfig+0xf78>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
 8001952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001956:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800195a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800195e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001964:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001972:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001976:	601a      	str	r2, [r3, #0]
  return result;
 8001978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001980:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800198c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	461a      	mov	r2, r3
 8001994:	2301      	movs	r3, #1
 8001996:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7fe fe7c 	bl	8000694 <HAL_GetTick>
 800199c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a2:	f7fe fe77 	bl	8000694 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e144      	b.n	8001c40 <HAL_RCC_OscConfig+0x106c>
 80019b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019da:	601a      	str	r2, [r3, #0]
  return result;
 80019dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	095b      	lsrs	r3, r3, #5
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_OscConfig+0xe2c>
 80019fa:	4b54      	ldr	r3, [pc, #336]	@ (8001b4c <HAL_RCC_OscConfig+0xf78>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	e027      	b.n	8001a50 <HAL_RCC_OscConfig+0xe7c>
 8001a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a04:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a12:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fa93 f2a3 	rbit	r2, r3
 8001a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a20:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a38:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a46:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <HAL_RCC_OscConfig+0xf78>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a54:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a58:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a5c:	6011      	str	r1, [r2, #0]
 8001a5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a62:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	fa92 f1a2 	rbit	r1, r2
 8001a6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a70:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a74:	6011      	str	r1, [r2, #0]
  return result;
 8001a76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a7a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	fab2 f282 	clz	r2, r2
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	f042 0220 	orr.w	r2, r2, #32
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	f002 021f 	and.w	r2, r2, #31
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f202 	lsl.w	r2, r1, r2
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d082      	beq.n	80019a2 <HAL_RCC_OscConfig+0xdce>
 8001a9c:	e0cf      	b.n	8001c3e <HAL_RCC_OscConfig+0x106a>
 8001a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001aa6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ac2:	601a      	str	r2, [r3, #0]
  return result;
 8001ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001acc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ad8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7fe fdd6 	bl	8000694 <HAL_GetTick>
 8001ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	e009      	b.n	8001b02 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7fe fdd1 	bl	8000694 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e09e      	b.n	8001c40 <HAL_RCC_OscConfig+0x106c>
 8001b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b06:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b14:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b22:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b26:	601a      	str	r2, [r3, #0]
  return result;
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	095b      	lsrs	r3, r3, #5
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d104      	bne.n	8001b50 <HAL_RCC_OscConfig+0xf7c>
 8001b46:	4b01      	ldr	r3, [pc, #4]	@ (8001b4c <HAL_RCC_OscConfig+0xf78>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e029      	b.n	8001ba0 <HAL_RCC_OscConfig+0xfcc>
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b62:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b70:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b88:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b96:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c4c <HAL_RCC_OscConfig+0x1078>)
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ba4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ba8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bac:	6011      	str	r1, [r2, #0]
 8001bae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bb2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	fa92 f1a2 	rbit	r1, r2
 8001bbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bc0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bc4:	6011      	str	r1, [r2, #0]
  return result;
 8001bc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	fab2 f282 	clz	r2, r2
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f042 0220 	orr.w	r2, r2, #32
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	f002 021f 	and.w	r2, r2, #31
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d180      	bne.n	8001aee <HAL_RCC_OscConfig+0xf1a>
 8001bec:	e027      	b.n	8001c3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e01e      	b.n	8001c40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c02:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_RCC_OscConfig+0x1078>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c0e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d10b      	bne.n	8001c3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b09e      	sub	sp, #120	@ 0x78
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e162      	b.n	8001f2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c68:	4b90      	ldr	r3, [pc, #576]	@ (8001eac <HAL_RCC_ClockConfig+0x25c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d910      	bls.n	8001c98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b8d      	ldr	r3, [pc, #564]	@ (8001eac <HAL_RCC_ClockConfig+0x25c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 0207 	bic.w	r2, r3, #7
 8001c7e:	498b      	ldr	r1, [pc, #556]	@ (8001eac <HAL_RCC_ClockConfig+0x25c>)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b89      	ldr	r3, [pc, #548]	@ (8001eac <HAL_RCC_ClockConfig+0x25c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e14a      	b.n	8001f2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b82      	ldr	r3, [pc, #520]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	497f      	ldr	r1, [pc, #508]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 80dc 	beq.w	8001e7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d13c      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xf6>
 8001ccc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xa6>
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	e00f      	b.n	8001d16 <HAL_RCC_ClockConfig+0xc6>
 8001cf6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d08:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d12:	4b67      	ldr	r3, [pc, #412]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d1a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001d1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d1e:	fa92 f2a2 	rbit	r2, r2
 8001d22:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001d24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d26:	fab2 f282 	clz	r2, r2
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	f042 0220 	orr.w	r2, r2, #32
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f002 021f 	and.w	r2, r2, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d17b      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0f3      	b.n	8001f2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d13c      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x178>
 8001d4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	095b      	lsrs	r3, r3, #5
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x128>
 8001d72:	4b4f      	ldr	r3, [pc, #316]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	e00f      	b.n	8001d98 <HAL_RCC_ClockConfig+0x148>
 8001d78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d94:	4b46      	ldr	r3, [pc, #280]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d9c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001d9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001da0:	fa92 f2a2 	rbit	r2, r2
 8001da4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001da6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001da8:	fab2 f282 	clz	r2, r2
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	f002 021f 	and.w	r2, r2, #31
 8001db8:	2101      	movs	r1, #1
 8001dba:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d13a      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0b2      	b.n	8001f2e <HAL_RCC_ClockConfig+0x2de>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d102      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x1a0>
 8001dea:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	e00d      	b.n	8001e0c <HAL_RCC_ClockConfig+0x1bc>
 8001df0:	2302      	movs	r3, #2
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	4b29      	ldr	r3, [pc, #164]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	61ba      	str	r2, [r7, #24]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	fa92 f2a2 	rbit	r2, r2
 8001e16:	617a      	str	r2, [r7, #20]
  return result;
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	fab2 f282 	clz	r2, r2
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f042 0220 	orr.w	r2, r2, #32
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f002 021f 	and.w	r2, r2, #31
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e079      	b.n	8001f2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	491a      	ldr	r1, [pc, #104]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e4c:	f7fe fc22 	bl	8000694 <HAL_GetTick>
 8001e50:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7fe fc1e 	bl	8000694 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e061      	b.n	8001f2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_RCC_ClockConfig+0x260>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 020c 	and.w	r2, r3, #12
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1eb      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_RCC_ClockConfig+0x25c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d214      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <HAL_RCC_ClockConfig+0x25c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 0207 	bic.w	r2, r3, #7
 8001e92:	4906      	ldr	r1, [pc, #24]	@ (8001eac <HAL_RCC_ClockConfig+0x25c>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <HAL_RCC_ClockConfig+0x25c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e040      	b.n	8001f2e <HAL_RCC_ClockConfig+0x2de>
 8001eac:	40022000 	.word	0x40022000
 8001eb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <HAL_RCC_ClockConfig+0x2e8>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	491a      	ldr	r1, [pc, #104]	@ (8001f38 <HAL_RCC_ClockConfig+0x2e8>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <HAL_RCC_ClockConfig+0x2e8>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4912      	ldr	r1, [pc, #72]	@ (8001f38 <HAL_RCC_ClockConfig+0x2e8>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ef2:	f000 f829 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4601      	mov	r1, r0
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <HAL_RCC_ClockConfig+0x2e8>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f00:	22f0      	movs	r2, #240	@ 0xf0
 8001f02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	fa92 f2a2 	rbit	r2, r2
 8001f0a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	fab2 f282 	clz	r2, r2
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	40d3      	lsrs	r3, r2
 8001f16:	4a09      	ldr	r2, [pc, #36]	@ (8001f3c <HAL_RCC_ClockConfig+0x2ec>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f1e:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <HAL_RCC_ClockConfig+0x2f0>)
 8001f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f22:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <HAL_RCC_ClockConfig+0x2f4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb70 	bl	800060c <HAL_InitTick>
  
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3778      	adds	r7, #120	@ 0x78
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08002d04 	.word	0x08002d04
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x30>
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x36>
 8001f76:	e026      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7a:	613b      	str	r3, [r7, #16]
      break;
 8001f7c:	e026      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001f8c:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	4a14      	ldr	r2, [pc, #80]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	e004      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	613b      	str	r3, [r7, #16]
      break;
 8001fc4:	e002      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fc8:	613b      	str	r3, [r7, #16]
      break;
 8001fca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fcc:	693b      	ldr	r3, [r7, #16]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	007a1200 	.word	0x007a1200
 8001fe4:	08002d14 	.word	0x08002d14
 8001fe8:	08002d24 	.word	0x08002d24
 8001fec:	003d0900 	.word	0x003d0900

08001ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e095      	b.n	800212e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	d108      	bne.n	800201c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002012:	d009      	beq.n	8002028 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
 800201a:	e005      	b.n	8002028 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe f98e 	bl	8000364 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800205e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002068:	d902      	bls.n	8002070 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e002      	b.n	8002076 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002074:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800207e:	d007      	beq.n	8002090 <HAL_SPI_Init+0xa0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002088:	d002      	beq.n	8002090 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d2:	ea42 0103 	orr.w	r1, r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	f003 0204 	and.w	r2, r3, #4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800210c:	ea42 0103 	orr.w	r1, r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b088      	sub	sp, #32
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	4613      	mov	r3, r2
 8002144:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_SPI_Transmit+0x22>
 8002154:	2302      	movs	r3, #2
 8002156:	e15f      	b.n	8002418 <HAL_SPI_Transmit+0x2e2>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002160:	f7fe fa98 	bl	8000694 <HAL_GetTick>
 8002164:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d002      	beq.n	800217c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002176:	2302      	movs	r3, #2
 8002178:	77fb      	strb	r3, [r7, #31]
    goto error;
 800217a:	e148      	b.n	800240e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_SPI_Transmit+0x52>
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800218c:	e13f      	b.n	800240e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2203      	movs	r2, #3
 8002192:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	88fa      	ldrh	r2, [r7, #6]
 80021a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	88fa      	ldrh	r2, [r7, #6]
 80021ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021d8:	d10f      	bne.n	80021fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002204:	2b40      	cmp	r3, #64	@ 0x40
 8002206:	d007      	beq.n	8002218 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002220:	d94f      	bls.n	80022c2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_SPI_Transmit+0xfa>
 800222a:	8afb      	ldrh	r3, [r7, #22]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d142      	bne.n	80022b6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002234:	881a      	ldrh	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002240:	1c9a      	adds	r2, r3, #2
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002254:	e02f      	b.n	80022b6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d112      	bne.n	800228a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002268:	881a      	ldrh	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002274:	1c9a      	adds	r2, r3, #2
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002288:	e015      	b.n	80022b6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800228a:	f7fe fa03 	bl	8000694 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d803      	bhi.n	80022a2 <HAL_SPI_Transmit+0x16c>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d102      	bne.n	80022a8 <HAL_SPI_Transmit+0x172>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d106      	bne.n	80022b6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80022b4:	e0ab      	b.n	800240e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ca      	bne.n	8002256 <HAL_SPI_Transmit+0x120>
 80022c0:	e080      	b.n	80023c4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_SPI_Transmit+0x19a>
 80022ca:	8afb      	ldrh	r3, [r7, #22]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d174      	bne.n	80023ba <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d912      	bls.n	8002300 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ea:	1c9a      	adds	r2, r3, #2
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b02      	subs	r3, #2
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022fe:	e05c      	b.n	80023ba <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	330c      	adds	r3, #12
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002326:	e048      	b.n	80023ba <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b02      	cmp	r3, #2
 8002334:	d12b      	bne.n	800238e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d912      	bls.n	8002366 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002350:	1c9a      	adds	r2, r3, #2
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b02      	subs	r3, #2
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002364:	e029      	b.n	80023ba <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	330c      	adds	r3, #12
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800238c:	e015      	b.n	80023ba <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800238e:	f7fe f981 	bl	8000694 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d803      	bhi.n	80023a6 <HAL_SPI_Transmit+0x270>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d102      	bne.n	80023ac <HAL_SPI_Transmit+0x276>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80023b8:	e029      	b.n	800240e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1b1      	bne.n	8002328 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fb69 	bl	8002aa0 <SPI_EndRxTxTransaction>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	77fb      	strb	r3, [r7, #31]
 8002404:	e003      	b.n	800240e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002416:	7ffb      	ldrb	r3, [r7, #31]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800242e:	2301      	movs	r3, #1
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_SPI_TransmitReceive+0x26>
 8002442:	2302      	movs	r3, #2
 8002444:	e20a      	b.n	800285c <HAL_SPI_TransmitReceive+0x43c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800244e:	f7fe f921 	bl	8000694 <HAL_GetTick>
 8002452:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800245a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800246a:	7efb      	ldrb	r3, [r7, #27]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d00e      	beq.n	800248e <HAL_SPI_TransmitReceive+0x6e>
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002476:	d106      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x66>
 8002480:	7efb      	ldrb	r3, [r7, #27]
 8002482:	2b04      	cmp	r3, #4
 8002484:	d003      	beq.n	800248e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800248c:	e1e0      	b.n	8002850 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_SPI_TransmitReceive+0x80>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_SPI_TransmitReceive+0x80>
 800249a:	887b      	ldrh	r3, [r7, #2]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d103      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80024a6:	e1d3      	b.n	8002850 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d003      	beq.n	80024bc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2205      	movs	r2, #5
 80024b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	887a      	ldrh	r2, [r7, #2]
 80024e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80024fe:	d802      	bhi.n	8002506 <HAL_SPI_TransmitReceive+0xe6>
 8002500:	8a3b      	ldrh	r3, [r7, #16]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d908      	bls.n	8002518 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	e007      	b.n	8002528 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002526:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002532:	2b40      	cmp	r3, #64	@ 0x40
 8002534:	d007      	beq.n	8002546 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800254e:	f240 8081 	bls.w	8002654 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_SPI_TransmitReceive+0x140>
 800255a:	8a7b      	ldrh	r3, [r7, #18]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d16d      	bne.n	800263c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002564:	881a      	ldrh	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002570:	1c9a      	adds	r2, r3, #2
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002584:	e05a      	b.n	800263c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b02      	cmp	r3, #2
 8002592:	d11b      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x1ac>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d016      	beq.n	80025cc <HAL_SPI_TransmitReceive+0x1ac>
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d113      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d11c      	bne.n	8002614 <HAL_SPI_TransmitReceive+0x1f4>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	b292      	uxth	r2, r2
 80025f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	1c9a      	adds	r2, r3, #2
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002610:	2301      	movs	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002614:	f7fe f83e 	bl	8000694 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002620:	429a      	cmp	r2, r3
 8002622:	d80b      	bhi.n	800263c <HAL_SPI_TransmitReceive+0x21c>
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d007      	beq.n	800263c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800263a:	e109      	b.n	8002850 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d19f      	bne.n	8002586 <HAL_SPI_TransmitReceive+0x166>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d199      	bne.n	8002586 <HAL_SPI_TransmitReceive+0x166>
 8002652:	e0e3      	b.n	800281c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_SPI_TransmitReceive+0x244>
 800265c:	8a7b      	ldrh	r3, [r7, #18]
 800265e:	2b01      	cmp	r3, #1
 8002660:	f040 80cf 	bne.w	8002802 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d912      	bls.n	8002694 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267e:	1c9a      	adds	r2, r3, #2
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b02      	subs	r3, #2
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002692:	e0b6      	b.n	8002802 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	330c      	adds	r3, #12
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ba:	e0a2      	b.n	8002802 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d134      	bne.n	8002734 <HAL_SPI_TransmitReceive+0x314>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d02f      	beq.n	8002734 <HAL_SPI_TransmitReceive+0x314>
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d12c      	bne.n	8002734 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d912      	bls.n	800270a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f4:	1c9a      	adds	r2, r3, #2
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b02      	subs	r3, #2
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002708:	e012      	b.n	8002730 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	330c      	adds	r3, #12
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d148      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x3b4>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d042      	beq.n	80027d4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d923      	bls.n	80027a2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	b292      	uxth	r2, r2
 8002766:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	1c9a      	adds	r2, r3, #2
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b02      	subs	r3, #2
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d81f      	bhi.n	80027d0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	e016      	b.n	80027d0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f103 020c 	add.w	r2, r3, #12
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	7812      	ldrb	r2, [r2, #0]
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027d0:	2301      	movs	r3, #1
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027d4:	f7fd ff5e 	bl	8000694 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d803      	bhi.n	80027ec <HAL_SPI_TransmitReceive+0x3cc>
 80027e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d102      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x3d2>
 80027ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002800:	e026      	b.n	8002850 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	f47f af57 	bne.w	80026bc <HAL_SPI_TransmitReceive+0x29c>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	f47f af50 	bne.w	80026bc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f93d 	bl	8002aa0 <SPI_EndRxTxTransaction>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002846:	e003      	b.n	8002850 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002858:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800285c:	4618      	mov	r0, r3
 800285e:	3728      	adds	r7, #40	@ 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002874:	f7fd ff0e 	bl	8000694 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4413      	add	r3, r2
 8002882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002884:	f7fd ff06 	bl	8000694 <HAL_GetTick>
 8002888:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800288a:	4b39      	ldr	r3, [pc, #228]	@ (8002970 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	0d1b      	lsrs	r3, r3, #20
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800289a:	e054      	b.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d050      	beq.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028a4:	f7fd fef6 	bl	8000694 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d902      	bls.n	80028ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d13d      	bne.n	8002936 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80028c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028d2:	d111      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028dc:	d004      	beq.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e6:	d107      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002900:	d10f      	bne.n	8002922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e017      	b.n	8002966 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3b01      	subs	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	429a      	cmp	r2, r3
 8002962:	d19b      	bne.n	800289c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000000 	.word	0x20000000

08002974 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	@ 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002986:	f7fd fe85 	bl	8000694 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	4413      	add	r3, r2
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002996:	f7fd fe7d 	bl	8000694 <HAL_GetTick>
 800299a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80029a4:	4b3d      	ldr	r3, [pc, #244]	@ (8002a9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00da      	lsls	r2, r3, #3
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	0d1b      	lsrs	r3, r3, #20
 80029b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80029bc:	e060      	b.n	8002a80 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029c4:	d107      	bne.n	80029d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d050      	beq.n	8002a80 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029de:	f7fd fe59 	bl	8000694 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d902      	bls.n	80029f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d13d      	bne.n	8002a70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a0c:	d111      	bne.n	8002a32 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a16:	d004      	beq.n	8002a22 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a20:	d107      	bne.n	8002a32 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a3a:	d10f      	bne.n	8002a5c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e010      	b.n	8002a92 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d196      	bne.n	80029be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3728      	adds	r7, #40	@ 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000000 	.word	0x20000000

08002aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f7ff ff5b 	bl	8002974 <SPI_WaitFifoStateUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e027      	b.n	8002b24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2180      	movs	r1, #128	@ 0x80
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff fec0 	bl	8002864 <SPI_WaitFlagStateUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e014      	b.n	8002b24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f7ff ff34 	bl	8002974 <SPI_WaitFifoStateUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b16:	f043 0220 	orr.w	r2, r3, #32
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e000      	b.n	8002b24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <rfm22_tx_init>:
 *      Author: mihal
 */
#include "rfm22.h"

void rfm22_tx_init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
	 uint8_t data;
	 data = spi_read(0x00);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fd fc8e 	bl	8000454 <spi_read>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	71fb      	strb	r3, [r7, #7]
    spi_write(0x07, 0x80);
 8002b3c:	2180      	movs	r1, #128	@ 0x80
 8002b3e:	2007      	movs	r0, #7
 8002b40:	f7fd fc52 	bl	80003e8 <spi_write>
    // Disable interrupts
    spi_write(0x06, 0x00);
 8002b44:	2100      	movs	r1, #0
 8002b46:	2006      	movs	r0, #6
 8002b48:	f7fd fc4e 	bl	80003e8 <spi_write>

    // Set device to READY mode
    spi_write(0x07, 0x01);
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2007      	movs	r0, #7
 8002b50:	f7fd fc4a 	bl	80003e8 <spi_write>

    // Set frequency to 434 MHz
    spi_write(0x75, 0x53);
 8002b54:	2153      	movs	r1, #83	@ 0x53
 8002b56:	2075      	movs	r0, #117	@ 0x75
 8002b58:	f7fd fc46 	bl	80003e8 <spi_write>
    spi_write(0x76, 0x64);
 8002b5c:	2164      	movs	r1, #100	@ 0x64
 8002b5e:	2076      	movs	r0, #118	@ 0x76
 8002b60:	f7fd fc42 	bl	80003e8 <spi_write>
    spi_write(0x77, 0x00);
 8002b64:	2100      	movs	r1, #0
 8002b66:	2077      	movs	r0, #119	@ 0x77
 8002b68:	f7fd fc3e 	bl	80003e8 <spi_write>

    // Set maximum TX power
    spi_write(0x6D, 0x07);
 8002b6c:	2107      	movs	r1, #7
 8002b6e:	206d      	movs	r0, #109	@ 0x6d
 8002b70:	f7fd fc3a 	bl	80003e8 <spi_write>

    // Set FIFO mode for TX
    spi_write(0x71, 0x20);
 8002b74:	2120      	movs	r1, #32
 8002b76:	2071      	movs	r0, #113	@ 0x71
 8002b78:	f7fd fc36 	bl	80003e8 <spi_write>

    // Set packet length
    spi_write(0x3E, 1);
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	203e      	movs	r0, #62	@ 0x3e
 8002b80:	f7fd fc32 	bl	80003e8 <spi_write>
    spi_write(0x34, 64);
 8002b84:	2140      	movs	r1, #64	@ 0x40
 8002b86:	2034      	movs	r0, #52	@ 0x34
 8002b88:	f7fd fc2e 	bl	80003e8 <spi_write>

    // Set synchronization word
    spi_write(0x36, 0x2D);
 8002b8c:	212d      	movs	r1, #45	@ 0x2d
 8002b8e:	2036      	movs	r0, #54	@ 0x36
 8002b90:	f7fd fc2a 	bl	80003e8 <spi_write>
    spi_write(0x37, 0xD4);
 8002b94:	21d4      	movs	r1, #212	@ 0xd4
 8002b96:	2037      	movs	r0, #55	@ 0x37
 8002b98:	f7fd fc26 	bl	80003e8 <spi_write>

    // Enable CRC, Packet TX Handling
    spi_write(0x30, 0x8c);
 8002b9c:	218c      	movs	r1, #140	@ 0x8c
 8002b9e:	2030      	movs	r0, #48	@ 0x30
 8002ba0:	f7fd fc22 	bl	80003e8 <spi_write>
    //spi_write(0x30, 0x8C);
    spi_write(0x6E, 0x27); // Data Rate, vyšší bajt
 8002ba4:	2127      	movs	r1, #39	@ 0x27
 8002ba6:	206e      	movs	r0, #110	@ 0x6e
 8002ba8:	f7fd fc1e 	bl	80003e8 <spi_write>
    spi_write(0x6F, 0x52); // Data Rate, nižší bajt
 8002bac:	2152      	movs	r1, #82	@ 0x52
 8002bae:	206f      	movs	r0, #111	@ 0x6f
 8002bb0:	f7fd fc1a 	bl	80003e8 <spi_write>
    spi_write(0x70, 0x20); // Modulácia: FSK, FIFO režim
 8002bb4:	2120      	movs	r1, #32
 8002bb6:	2070      	movs	r0, #112	@ 0x70
 8002bb8:	f7fd fc16 	bl	80003e8 <spi_write>
    spi_write(0x34, 0x14); // Preamble Length
 8002bbc:	2114      	movs	r1, #20
 8002bbe:	2034      	movs	r0, #52	@ 0x34
 8002bc0:	f7fd fc12 	bl	80003e8 <spi_write>
    spi_write(0x35, 0x14); // Preamble Detection Length
 8002bc4:	2114      	movs	r1, #20
 8002bc6:	2035      	movs	r0, #53	@ 0x35
 8002bc8:	f7fd fc0e 	bl	80003e8 <spi_write>
    spi_write(0x3F, 0x00); // Header Control
 8002bcc:	2100      	movs	r1, #0
 8002bce:	203f      	movs	r0, #63	@ 0x3f
 8002bd0:	f7fd fc0a 	bl	80003e8 <spi_write>

    spi_write(0x08, 0x03);
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	2008      	movs	r0, #8
 8002bd8:	f7fd fc06 	bl	80003e8 <spi_write>
    spi_write(0x08, 0x00);
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2008      	movs	r0, #8
 8002be0:	f7fd fc02 	bl	80003e8 <spi_write>

    data = spi_read(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fd fc35 	bl	8000454 <spi_read>
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]


}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <rfm22_send>:

void rfm22_send(uint8_t *data, uint8_t length)


{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70fb      	strb	r3, [r7, #3]
	uint8_t reg4,reg3;
	spi_write(0x08, 0x03);
 8002c02:	2103      	movs	r1, #3
 8002c04:	2008      	movs	r0, #8
 8002c06:	f7fd fbef 	bl	80003e8 <spi_write>
	spi_write(0x08, 0x00);
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2008      	movs	r0, #8
 8002c0e:	f7fd fbeb 	bl	80003e8 <spi_write>
	    reg3 = spi_read(0x03);
 8002c12:	2003      	movs	r0, #3
 8002c14:	f7fd fc1e 	bl	8000454 <spi_read>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	72fb      	strb	r3, [r7, #11]
	    reg4 = spi_read(0x04);
 8002c1c:	2004      	movs	r0, #4
 8002c1e:	f7fd fc19 	bl	8000454 <spi_read>
 8002c22:	4603      	mov	r3, r0
 8002c24:	72bb      	strb	r3, [r7, #10]
    // Write data to TX FIFO
	for (int i = 0; i < 20; i++) {
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e008      	b.n	8002c3e <rfm22_send+0x48>
             spi_write(0x7F, i); // Zapíšte bajty do TX FIFO
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	4619      	mov	r1, r3
 8002c32:	207f      	movs	r0, #127	@ 0x7f
 8002c34:	f7fd fbd8 	bl	80003e8 <spi_write>
	for (int i = 0; i < 20; i++) {
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b13      	cmp	r3, #19
 8002c42:	ddf3      	ble.n	8002c2c <rfm22_send+0x36>
           }
    reg3 = spi_read(0x03);
 8002c44:	2003      	movs	r0, #3
 8002c46:	f7fd fc05 	bl	8000454 <spi_read>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	72fb      	strb	r3, [r7, #11]
    // Set device to TX mode
    spi_write(0x07, 0x09);
 8002c4e:	2109      	movs	r1, #9
 8002c50:	2007      	movs	r0, #7
 8002c52:	f7fd fbc9 	bl	80003e8 <spi_write>
    reg4 = spi_read(0x04);
 8002c56:	2004      	movs	r0, #4
 8002c58:	f7fd fbfc 	bl	8000454 <spi_read>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	72bb      	strb	r3, [r7, #10]

	do {
	    reg3 = spi_read(0x03); // Čítanie Interrupt Status 2
 8002c60:	2003      	movs	r0, #3
 8002c62:	f7fd fbf7 	bl	8000454 <spi_read>
 8002c66:	4603      	mov	r3, r0
 8002c68:	72fb      	strb	r3, [r7, #11]
	} while ((reg3 & 0x04) == 0); // Čakať na ITXDONE (Bit 4)
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f5      	beq.n	8002c60 <rfm22_send+0x6a>

    // Return to READY mode after transmission
	spi_write(0x08, 0x03);
 8002c74:	2103      	movs	r1, #3
 8002c76:	2008      	movs	r0, #8
 8002c78:	f7fd fbb6 	bl	80003e8 <spi_write>
	spi_write(0x08, 0x00);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2008      	movs	r0, #8
 8002c80:	f7fd fbb2 	bl	80003e8 <spi_write>
	spi_write(0x07, 0x01);
 8002c84:	2101      	movs	r1, #1
 8002c86:	2007      	movs	r0, #7
 8002c88:	f7fd fbae 	bl	80003e8 <spi_write>
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <memset>:
 8002c94:	4402      	add	r2, r0
 8002c96:	4603      	mov	r3, r0
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <memset+0xa>
 8002c9c:	4770      	bx	lr
 8002c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca2:	e7f9      	b.n	8002c98 <memset+0x4>

08002ca4 <__libc_init_array>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8002cdc <__libc_init_array+0x38>)
 8002ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8002ce0 <__libc_init_array+0x3c>)
 8002caa:	1b64      	subs	r4, r4, r5
 8002cac:	10a4      	asrs	r4, r4, #2
 8002cae:	2600      	movs	r6, #0
 8002cb0:	42a6      	cmp	r6, r4
 8002cb2:	d109      	bne.n	8002cc8 <__libc_init_array+0x24>
 8002cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8002ce4 <__libc_init_array+0x40>)
 8002cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8002ce8 <__libc_init_array+0x44>)
 8002cb8:	f000 f818 	bl	8002cec <_init>
 8002cbc:	1b64      	subs	r4, r4, r5
 8002cbe:	10a4      	asrs	r4, r4, #2
 8002cc0:	2600      	movs	r6, #0
 8002cc2:	42a6      	cmp	r6, r4
 8002cc4:	d105      	bne.n	8002cd2 <__libc_init_array+0x2e>
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ccc:	4798      	blx	r3
 8002cce:	3601      	adds	r6, #1
 8002cd0:	e7ee      	b.n	8002cb0 <__libc_init_array+0xc>
 8002cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd6:	4798      	blx	r3
 8002cd8:	3601      	adds	r6, #1
 8002cda:	e7f2      	b.n	8002cc2 <__libc_init_array+0x1e>
 8002cdc:	08002d34 	.word	0x08002d34
 8002ce0:	08002d34 	.word	0x08002d34
 8002ce4:	08002d34 	.word	0x08002d34
 8002ce8:	08002d38 	.word	0x08002d38

08002cec <_init>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr

08002cf8 <_fini>:
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	bf00      	nop
 8002cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfe:	bc08      	pop	{r3}
 8002d00:	469e      	mov	lr, r3
 8002d02:	4770      	bx	lr
